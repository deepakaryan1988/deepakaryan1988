name: Update README ‚Äì Blog Posts (Backup)
on:
  workflow_dispatch:
  schedule:
    - cron: "30 0 * * *"  # Daily at 00:30 UTC (30 min after primary)

permissions:
  contents: write

jobs:
  update-readme-with-blog-backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install xml2js axios axios-retry

      - name: Update README with blog posts
        run: |
          const axios = require('axios');
          const axiosRetry = require('axios-retry');
          const xml2js = require('xml2js');
          const fs = require('fs');
          const { execSync } = require('child_process');

          const rssUrl = 'https://debugdeploygrow.hashnode.dev/rss.xml';
          const readmePath = 'README.md';

          // Configure axios with retry logic
          axiosRetry(axios, { 
            retries: 5,
            retryDelay: (retryCount) => {
              const delay = Math.min(1000 * Math.pow(2, retryCount), 30000);
              console.log(`Retry ${retryCount}: waiting ${delay}ms`);
              return delay;
            },
            retryCondition: (error) => {
              return axiosRetry.isNetworkOrIdempotentRequestError(error) || 
                     error.response?.status === 429;
            }
          });

          async function fetchRSS() {
            try {
              const response = await axios.get(rssUrl, {
                headers: {
                  'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',
                  'Accept': 'application/rss+xml, application/xml;q=0.9, */*;q=0.8',
                  'Accept-Language': 'en-US,en;q=0.9',
                  'Cache-Control': 'no-cache'
                },
                timeout: 30000
              });
              
              return response.data;
            } catch (error) {
              if (error.response?.status === 429) {
                const retryAfter = error.response.headers['retry-after'];
                if (retryAfter) {
                  console.log(`Rate limited. Waiting ${retryAfter} seconds...`);
                  await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
                  return fetchRSS(); // Retry once more after waiting
                }
              }
              throw error;
            }
          }

          async function updateREADME() {
            try {
              console.log('Fetching RSS feed...');
              const rssData = await fetchRSS();
              
              const parser = new xml2js.Parser();
              const result = await parser.parseStringPromise(rssData);
              
              const items = result.rss.channel[0].item || [];
              const recentPosts = items.slice(0, 5);
              
              let readmeContent = fs.readFileSync(readmePath, 'utf8');
              
              // Find and replace the blog posts section
              const blogSectionRegex = /## üìù Recent Blog Posts[\s\S]*?(?=##|$)/;
              const blogSection = `## üìù Recent Blog Posts\n\n${recentPosts.map(post => {
                const title = post.title[0];
                const url = post.link[0];
                const date = new Date(post.pubDate[0]).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric'
                });
                return `‚Ä¢ [${title}](${url}) - ${date}`;
              }).join('\n')}\n`;
              
              if (blogSectionRegex.test(readmeContent)) {
                readmeContent = readmeContent.replace(blogSectionRegex, blogSection);
              } else {
                readmeContent += '\n\n' + blogSection;
              }
              
              fs.writeFileSync(readmePath, readmeContent);
              
              // Commit and push changes
              execSync('git config --global user.email "action@github.com"');
              execSync('git config --global user.name "GitHub Action"');
              execSync('git add README.md');
              execSync('git commit -m "üìù Update blog posts in README (backup workflow)"');
              execSync('git push');
              
              console.log('README updated successfully!');
            } catch (error) {
              console.error('Error updating README:', error.message);
              process.exit(1);
            }
          }

          updateREADME();
